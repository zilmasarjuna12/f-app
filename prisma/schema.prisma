// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  workspaces    WorkspaceMember[]

  @@unique([email])
  @@map("user")

  @@index([email])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  @@index([userId])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
  @@index([identifier, value])
}

model Workspace {
  id        String   @id @default(uuid())
  name      String

  members   WorkspaceMember[]
  wallets   Wallet[]
  transactions Transaction[]

  createdAt BigInt
  updatedAt BigInt
  DeleteAt  BigInt?

  @@map("workspace")

  @@index([name])
  @@unique([id])
}

model WorkspaceMember {
  id          String   @id @default(uuid())
  userId      String
  workspaceId String
  role        String
  createdAt   BigInt
  updatedAt   BigInt
  DeleteAt    BigInt?  

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_member")

  @@index([userId, workspaceId])
}

model Wallet {
  id          String   @id @default(uuid())
  name        String
  balance     Float    @default(0)
  currency    String
  workspaceId String
  createdAt   BigInt
  updatedAt   BigInt
  DeleteAt    BigInt?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallet")

  @@index([workspaceId])
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Float
  currency    String
  walletId    String
  category    String
  type        String
  workspaceId String
  createdAt   BigInt
  updatedAt   BigInt
  DeleteAt    BigInt?

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  wallet      Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transaction")
  @@index([walletId])
  @@index([workspaceId])
}